
"""
Utility Functions Module for ESP32 IoT Control System
====================================================

Collection of helper functions for device validation, message handling,
time formatting, and API response creation. Provides common functionality
used across multiple modules in the ESP32 IoT control system.

Author: Erfan Mohamadnia
License: MIT
Version: 1.0.0

Features:
- Device name and parameter validation
- Localized message handling (English/Persian)
- Time formatting and conversion utilities
- Standardized API response creation
- Memory and performance optimization helpers

Dependencies:
- time: System time functions
- gc: Garbage collection management
- json: JSON data handling
- config: System configuration module

Generated by Copilot
"""

import time
import gc
import json
import config


# ============================================================================
# TIME AND FORMATTING UTILITIES
# ============================================================================

def format_time(timestamp=None):
    """
    Convert timestamp to human-readable string format.
    
    Formats Unix timestamp or current time into a readable date/time string
    in YYYY/MM/DD HH:MM:SS format for consistent display across the system.
    
    Args:
        timestamp (float, optional): Unix timestamp to format. 
                                   Defaults to current time if None.
    
    Returns:
        str: Formatted time string in YYYY/MM/DD HH:MM:SS format
    """
    if timestamp is None:
        timestamp = time.time()
    
    time_tuple = time.localtime(timestamp)
    return f"{time_tuple[0]}/{time_tuple[1]:02d}/{time_tuple[2]:02d} {time_tuple[3]:02d}:{time_tuple[4]:02d}:{time_tuple[5]:02d}"


# ============================================================================
# DEVICE VALIDATION FUNCTIONS
# ============================================================================

def validate_device(device_name):
    """
    Validate if device name exists in system configuration.
    
    Checks whether the provided device name is registered in the
    system configuration and can be controlled by the IoT system.
    
    Args:
        device_name (str): Name of the device to validate
    
    Returns:
        bool: True if device exists in configuration, False otherwise
    """
    return device_name in config.DEVICE_CONFIG

def validate_duration(device_name, duration):
    """
    Validate operation duration for a specific device.
    
    Checks if the requested duration is within acceptable limits for
    the specified device. Each device has configured maximum duration
    limits for safety and operational efficiency.
    
    Args:
        device_name (str): Name of the device to validate duration for
        duration (int): Requested operation duration in seconds
    
    Returns:
        tuple: (is_valid: bool, message: str) validation result and message
    """
    if not validate_device(device_name):
        return False, "Invalid device"
    
    if device_name == 'servo':
        return False, "Servo doesn't support duration"
    
    max_duration = config.DEVICE_CONFIG[device_name]['max_duration']
    if duration <= 0 or duration > max_duration:
        return False, f"Duration must be between 1 and {max_duration} seconds"
    
    return True, "Valid"

def validate_servo_angle(angle):
    """
    Validate servo motor angle within operational limits.
    
    Ensures the requested servo angle falls within the configured
    minimum and maximum angle limits to prevent hardware damage.
    
    Args:
        angle (int): Requested servo angle in degrees
    
    Returns:
        tuple: (is_valid: bool, message: str) validation result and message
    """
    servo_config = config.DEVICE_CONFIG['servo']
    min_angle = servo_config['min_angle']
    max_angle = servo_config['max_angle']
    
    if min_angle <= angle <= max_angle:
        return True, "Valid angle"
    else:
        return False, f"Angle must be between {min_angle} and {max_angle} degrees"

def get_device_channel(device_name):
    """
    Retrieve hardware channel number for a device.
    
    Returns the configured hardware channel (relay/GPIO pin) associated
    with the specified device for direct hardware control.
    
    Args:
        device_name (str): Name of the device
    
    Returns:
        int or None: Hardware channel number, or None if not found
    """
    if device_name in config.DEVICE_CONFIG and 'channel' in config.DEVICE_CONFIG[device_name]:
        return config.DEVICE_CONFIG[device_name]['channel']
    return None


# ============================================================================
# LOCALIZED MESSAGE HANDLING
# ============================================================================

def get_success_message(message_key, **kwargs):
    """
    Generate localized success message in multiple languages.
    
    Retrieves pre-configured success messages in both English and Persian
    languages, with support for string formatting using provided parameters.
    
    Args:
        message_key (str): Key identifier for the message template
        **kwargs: Parameters for string formatting
    
    Returns:
        dict: Dictionary containing 'message' (English) and 'message_fa' (Persian)
    """
    if message_key in config.SUCCESS_MESSAGES:
        messages = config.SUCCESS_MESSAGES[message_key]
        en_msg = messages['en'].format(**kwargs)
        fa_msg = messages['fa'].format(**kwargs)
        return {
            'message': en_msg,
            'message_fa': fa_msg
        }
    return {
        'message': 'Operation successful',
        'message_fa': 'عملیات موفق'
    }

def get_error_message(message_key):
    """
    Generate localized error message in multiple languages.
    
    Retrieves pre-configured error messages in both English and Persian
    languages for consistent error reporting across the system.
    
    Args:
        message_key (str): Key identifier for the error message
    
    Returns:
        dict: Dictionary containing 'error' (English) and 'error_fa' (Persian)
    """
    if message_key in config.ERROR_MESSAGES:
        messages = config.ERROR_MESSAGES[message_key]
        return {
            'error': messages['en'],
            'error_fa': messages['fa']
        }
    return {
        'error': 'Unknown error',
        'error_fa': 'خطای نامشخص'
    }


# ============================================================================
# API RESPONSE UTILITIES
# ============================================================================

def create_api_response(success=True, data=None, message_key=None, **kwargs):
    """
    Create standardized API response with consistent structure.
    
    Generates uniform API responses with success status, timestamp,
    optional data payload, and localized messages. Ensures all API
    endpoints return data in the same format.
    
    Args:
        success (bool): Operation success status
        data (dict, optional): Response data payload
        message_key (str, optional): Message template key for localization
        **kwargs: Additional parameters for message formatting
    
    Returns:
        dict: Standardized API response structure
    """
    response = {
        'success': success,
        'timestamp': time.time(),
        'formatted_time': format_time()
    }
    
    if data:
        response['data'] = data
    
    if message_key:
        if success:
            response.update(get_success_message(message_key, **kwargs))
        else:
            response.update(get_error_message(message_key))
    
    return response


# ============================================================================
# TASK MANAGEMENT UTILITIES
# ============================================================================

def parse_task_time(date_str, time_str):
    """
    Parse task date and time strings into timestamp.
    
    Converts date (YYYY-MM-DD) and time (HH:MM) strings into a Unix
    timestamp for task scheduling and comparison operations.
    
    Args:
        date_str (str): Date string in YYYY-MM-DD format
        time_str (str): Time string in HH:MM format
    
    Returns:
        tuple: (timestamp: float or None, success: bool) parsing result
    """
    try:
        # Parse date components (YYYY-MM-DD)
        date_parts = date_str.split('-')
        year = int(date_parts[0])
        month = int(date_parts[1])
        day = int(date_parts[2])
        
        # Parse time components (HH:MM)
        time_parts = time_str.split(':')
        hour = int(time_parts[0])
        minute = int(time_parts[1])
        
        # Create time tuple and convert to timestamp
        time_tuple = (year, month, day, hour, minute, 0, 0, 0)
        timestamp = time.mktime(time_tuple)
        
        return timestamp, True
    except Exception:
        return None, False

def is_task_due(task):
    """
    Check if a scheduled task is due for execution.
    
    Compares the task's scheduled date and time with the current
    system time to determine if the task should be executed now.
    
    Args:
        task (dict): Task dictionary containing 'date' and 'time' keys
    
    Returns:
        bool: True if task is due for execution, False otherwise
    """
    current_time = time.localtime()
    current_date = f"{current_time[0]}-{current_time[1]:02d}-{current_time[2]:02d}"
    current_time_str = f"{current_time[3]:02d}:{current_time[4]:02d}"
    
    return task['date'] == current_date and task['time'] == current_time_str

def validate_task_data(task_data):
    """
    Validate task data structure and content.
    
    Performs comprehensive validation of task data including required
    fields, device names, duration limits, and date/time formats.
    
    Args:
        task_data (dict): Task data dictionary to validate
    
    Returns:
        tuple: (is_valid: bool, message: str) validation result and message
    """
    required_fields = ['date', 'time', 'device', 'duration']
    
    # Check for required fields
    for field in required_fields:
        if field not in task_data:
            return False, f"Missing required field: {field}"
    
    # Validate device name
    if not validate_device(task_data['device']):
        return False, "Invalid device"
    
    # Validate duration value
    try:
        duration = int(task_data['duration'])
        valid, message = validate_duration(task_data['device'], duration)
        if not valid:
            return False, message
    except Exception:
        return False, "Invalid duration format"
    
    # Validate date format (YYYY-MM-DD)
    try:
        date_parts = task_data['date'].split('-')
        if len(date_parts) != 3:
            raise ValueError
        year, month, day = int(date_parts[0]), int(date_parts[1]), int(date_parts[2])
        if not (1 <= month <= 12 and 1 <= day <= 31):
            raise ValueError
    except Exception:
        return False, "Invalid date format (use YYYY-MM-DD)"
    
    # Validate time format (HH:MM)
    try:
        time_parts = task_data['time'].split(':')
        if len(time_parts) != 2:
            raise ValueError
        hour, minute = int(time_parts[0]), int(time_parts[1])
        if not (0 <= hour <= 23 and 0 <= minute <= 59):
            raise ValueError
    except Exception:
        return False, "Invalid time format (use HH:MM)"
    
    return True, "Valid task data"


# ============================================================================
# SYSTEM MONITORING AND MAINTENANCE
# ============================================================================

def get_system_info():
    """
    Retrieve comprehensive system status information.
    
    Collects current system metrics including memory usage, time,
    uptime, and configuration status for monitoring and debugging.
    
    Returns:
        dict: System information including memory, time, and status data
    """
    current_time = time.localtime()
    return {
        'free_memory': gc.mem_free(),
        'current_time': {
            'timestamp': time.time(),
            'formatted': format_time(),
            'year': current_time[0],
            'month': current_time[1],
            'day': current_time[2],
            'hour': current_time[3],
            'minute': current_time[4],
            'second': current_time[5]
        },
        'uptime_seconds': time.time(),  # Approximate uptime since boot
        'config_loaded': True
    }

def log_message(message, level='INFO'):
    """
    Log message with timestamp and severity level.
    
    Provides centralized logging functionality with configurable
    verbosity based on debug mode and message severity.
    
    Args:
        message (str): Message to log
        level (str): Severity level ('DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL')
    """
    if config.SYSTEM_CONFIG['debug_mode'] or level in ['ERROR', 'CRITICAL']:
        timestamp = format_time()
        print(f"[{timestamp}] [{level}] {message}")

def cleanup_resources():
    """
    Perform system resource cleanup and garbage collection.
    
    Forces garbage collection to free unused memory and logs the
    results for monitoring system health and performance.
    """
    gc.collect()
    log_message(f"Memory cleanup completed. Free: {gc.mem_free()} bytes", 'DEBUG')

def check_memory_threshold():
    """
    Monitor memory usage and trigger cleanup if needed.
    
    Checks current free memory against configured threshold and
    performs automatic cleanup if memory is running low.
    
    Returns:
        bool: True if memory was below threshold and cleanup was performed
    """
    free_memory = gc.mem_free()
    threshold = config.SYSTEM_CONFIG['memory_threshold']
    
    if free_memory < threshold:
        log_message(f"Low memory warning: {free_memory} bytes free", 'WARNING')
        cleanup_resources()
        return True
    
    return False


# ============================================================================
# JSON AND DATA UTILITIES
# ============================================================================

def safe_json_loads(json_string, default=None):
    """
    Safely parse JSON string with fallback value.
    
    Attempts to parse JSON string and returns default value if
    parsing fails, preventing crashes from malformed data.
    
    Args:
        json_string (str): JSON string to parse
        default: Default value to return on parse failure
    
    Returns:
        Parsed JSON data or default value
    """
    try:
        return json.loads(json_string)
    except Exception:
        return default if default is not None else {}

def safe_json_dumps(data, default='{}'):
    """
    Safely serialize data to JSON string with fallback.
    
    Attempts to serialize data to JSON and returns default string
    if serialization fails, ensuring consistent API responses.
    
    Args:
        data: Data to serialize to JSON
        default (str): Default JSON string to return on failure
    
    Returns:
        str: JSON string representation or default value
    """
    try:
        return json.dumps(data)
    except Exception:
        return default

def get_device_info(device_name):
    """
    Retrieve configuration information for a specific device.
    
    Returns the complete configuration dictionary for the specified
    device, including operational parameters and limits.
    
    Args:
        device_name (str): Name of the device to get information for
    
    Returns:
        dict or None: Device configuration dictionary, or None if not found
    """
    if device_name in config.DEVICE_CONFIG:
        return config.DEVICE_CONFIG[device_name]
    return None
